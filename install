#!/usr/bin/env es
# vim: et sw=3 sts=3

# does several things:

# - git submodule update --init --recursive
# - makes any subdirectory with a Makefile
# - create symlinks from $HOME to here.
#   if here is inside $HOME, the links are relative.
# - generates an uninstall script, usually invoked by itself.

# install u  to uninstall
# install f  to install even if some files already exist
#            they will be backed up, uninstall will restore

# if yes, filesystem-touching commands are echoed
DEBUG=no

# A list of operations to be attempted in order to install our stuff.
# They're defined immediately below. They take care of their own
# rollback-ing.
targets = (
   { link_file .config/bpython }
   { link_file .config/git }
   { link_file .config/herbstluftwm }
   { link_file .config/mpv }
   { link_name .config/nvim ../.vim }

   { ensure_directory .local/bin }

   { ensure_directory .mozilla/firefox }
   { optional (
      { with_local ff_profile {get_firefox_profile} (
         { ensure_directory .mozilla/firefox/$ff_profile/chrome }
         { copy_as .mozilla/firefox/$ff_profile/chrome/bindings.xml firefox/bindings.xml }
         { copy_as .mozilla/firefox/$ff_profile/chrome/userChrome.css firefox/userChrome.css }
      )}
   )}

   { with_loop python { result (
      3.4 3.5 3.6 3.7 3.8 3.9
   )} (
      { ensure_directory .local/lib/python$python/site-packages }
      { link_as .local/lib/python$python/site-packages/usercustomize.py usercustomize.py }
      { optional (
         { link_as Library/Python/$python/lib/python/site-packages/usercustomize.py usercustomize.py }
      )}
   )}

   { link_as .cvsignore ignore }
   { link_file .ctags }
   { link_file .esrc }
   { ensure_file .gitconfig }
   { link_file .profile }
   { link_file .tmux.conf }
   { link_file .vim }
   { link_file .vimrc }
   { ensure_directory .vim-tmp }
   { ensure_directory .vim-undo }
   { link_file .xbindkeysrc }
   { link_file .xinitrc }
   { link_file .Xresources }
   { link_as .xsessionrc .xinitrc }

   { ensure_directory bin }
   { ensure_directory src }
   { ensure_directory tmp }

   { with_umask 077 (
      # handle this specially because .ssh permissions are important
      { ensure_directory .ssh }
      { copy_file .ssh/config }
      { ensure_file .ssh/config.local }
      # an extremely non-general thing that replaces 'Include' directives
      # with their referents if ssh doesn't support Include yet
      { preprocess_ssh_conf .ssh/config }
   )}
)

make = (
   .vim/bundle/vimproc.vim
)

fn optional targets {
   for (target=$targets) { r=<=$target || break }
   if {! result $r} {echo : optional target failed: $r}
   return 0
}

fn with_loop name value targets {
   let (r=) {
      catch @ e args { r = $args } { value = <=$value }
      result $r || return $r
   }
   for (v=$value) {
      local (($name)=$v) {
         for (target=$targets) { r=<=$target || break }
      }
   }
   return $r
}

fn with_local name value targets {
   let (r=) {
      catch @ e args { r = $args } { value = <=$value }
      result $r || return $r
   }
   local (($name)=$value) {
      for (target=$targets) { r=<=$target || break }
   }
   return $r
}

fn with_umask mask targets {
   restore = `umask
   umask $mask
   for (target=$targets) { r=<=$target || break }
   umask $restore
   return $r
}

# Link a particular filename from $HOME and append the complementary
# operation to the uninstaller script
fn link_file n f {
   prepare_target $n {ln -s $linkpath/$n $HOME/$n && $f}
}

fn link_as n t f {
   prepare_target $n {ln -s $linkpath/$t $HOME/$n && $f}
}

# Make a filename (relative to $HOME) an arbitrary symbolic link
fn link_name n t f {
   prepare_target $n {ln -s $t $HOME/$n && $f}
}

# Copy a file
fn copy_file n f {
   prepare_target $n {cp $n $HOME/$n && $f}
}

fn copy_as n t f {
   prepare_target $n {cp $t $HOME/$n && $f}
}

# Ensure a name relative to $HOME is a directory. Can't be forced if
# it's not a directory; uninstalling would have to remove the dir
# again, which I don't like.
fn ensure_directory n f {
   echo \= $n
   if {[ -d $HOME/$n ]} {
      return
   } {[ -e $HOME/$n ]} {
      echo error: $HOME/$n exists and is not a directory
   } {
      mkdir -p $HOME/$n || return 'can''t create '$HOME/$n' or a parent'
      $f
   }
}

# Ensure a name is a file
fn ensure_file n f {
   echo \= $n
   if {[ -f $HOME/$n ]} {
      return
   } {[ -e $HOME/$n ]} {
      echo error: $HOME/$n exists and is not a file
   } {
      touch $HOME/$n
      $f
   }
}

# unbreak ssh config if there is no Include
# this doesn't do its own rollback and depends on .ssh/config
# being copy_file'd
fn preprocess_ssh_conf n f {
   fn include_ssh_conf {
      let (line = <={%read}; host_or_match = 'Host *') \
      while {! result $#line} {
         stripped = `` \n {echo $line | sed 's/^\s\+//'}
         if {~ $stripped Host\ * Match\ *} {
            host_or_match = $line
         }
         include = <= {~~ $stripped Include\ *}
         if {! result $#include} {
            if {! ~ $include /*} {include = $HOME/.ssh/$include}
            echo \# Begin $line
            include_ssh_conf < $include
            echo $host_or_match
            echo \# End $line
         } {
            echo $line
         }
         line = <={%read}
      }
   }
   output = `` \n {ssh -o Include >[2=1]}
   ~ $output *'Bad configuration option'* || return
   echo ! $n
   scratch = `` \n {mktemp $HOME/$n.XXXXXXXXXX}
   mv $HOME/$n $scratch
   include_ssh_conf < $scratch > $HOME/$n
   rm $scratch
}

fn get_firefox_profile {
   if {[ ! -f $HOME/.mozilla/firefox/profiles.ini ]} {
      throw error 'no firefox profile exists'
   }
   return `` \n {sed -n '0,/^Default\=1/bx;/^$/,$d;:x;/^Path\=/{s/^Path=//;p}' < $HOME/.mozilla/firefox/profiles.ini | tail -1}
}

#####

fn dbg x {
   let (r=<=$x) { echo \$ $^x\t-\> $^r >[1=2]; return $r }
}

debugme = @ {
   local (fn-$0=) { dbg $0 $* }
}

if {~ $DEBUG yes} {
   fn-git = $debugme
   fn-make = $debugme
   fn-cp = $debugme
   fn-ln = $debugme
   fn-mkdir = $debugme
   fn-mktemp = $debugme
   fn-mv = $debugme
   fn-rm = $debugme
}

#####

fn-cd = $&cd

catch @ {
   fn realpath p { readlink -f $p }
} {
   %pathsearch realpath
}

if {result $0 || result $HOME || ~ $HOME /} {
   echo Insufficient environment
   exit 1
}

uninstaller = $HOME/.edk.uninstall.es

uninst=
force=
relative=

backup_dir=

if {~ $1 u} {
   echo Uninstall
   uninst=y
}

if {~ $1 f} {
   echo Force install
   force=y
}

local (me=$0) installpath=`{dirname `{realpath $me}}

if {~ $installpath $HOME/*} {
   linkpath = <={~~ $installpath $HOME/*}
   relative=y
   echo 'Relative install:' $linkpath
} {
   linkpath = $installpath
   echo 'Absolute install:' $linkpath
}

#####

# Uninstall a previous installation, and possibly restore from backups
fn uninstall a {
   if {[ -f $uninstaller ]} {
      fork {. $uninstaller $a}
      rm $uninstaller
   }
}

# Roll back the installation in progress
fn rollback {
   uninstall
   if {! result $#backup_dir} {rmdir $backup_dir}
}

# If this is a relative installation, return enough '../' to get from
# the file named by $f to its containing directory
fn relpath f {
   if {result $relative} return
   local (t='') {
      while {~ $f ?*/?*} {
         f = `` \n {echo $f | sed -E 's,^[^/]+/,,'}
         t = $t ^ '../'
      }
      result $t
   }
}

# Return the path to the backup directory, creating it if necessary
fn backup_dir {
   if {result $#backup_dir} {
      backup_dir=`` \n {mktemp -d $HOME/.edk.backup-XXXXXXXX}
   }
   result $backup_dir
}

# Uninstaller-y groundwork for creating a file
# move it out of the way if we're forcing, execute f, and then create an
# uninstall line
fn prepare_target n f {
   echo + $n
   local (backuppath=) {
      local (linkpath=(<={relpath $n})^$linkpath) {
         if {[ -e $HOME/$n ]} {
            if {! result $#force} {
               backuppath = <={backup_dir} ^ /$n
               mkdir -p `` \n {dirname $backuppath}
               mv $HOME/$n $backuppath
               $f || return 'install '^$n^' returned nonzero'
            } {
               echo error: $HOME/$n exists
               return 'file exists'
            }
         } {
            $f || return 'install '^$n^' returned nonzero'
         }
      }
      f = ()
      let (p=$HOME/$n) {
         if {result $#backuppath} {
            remove = {
               echo - $n
               rm -- $p
            }
         } {
            let (backuppath=$backuppath) remove = {
               echo \* $n
               rm -- $p
               mv -- $backuppath $p
            }
         }
         echo $remove >> $uninstaller
      }
   }
}

#####

uninstall

if {result $#uninst} {
   echo Updating git modules...
   if {~ $DEBUG no} {
      git_opts = --quiet
   }
   fork {
      cd $installpath
      git submodule update --init --recursive $git_opts
   } || {
      echo Not installing, git errored
      exit 1
   }

   echo Making things...
   fork {
      cd $installpath
      for (f = $make) {
         echo $f
         fork {
            cd $f
            make || exit 1
         } || exit 1
      }
   } || {
      echo Not installing, a Makefile errored
      exit 1
   }

   for (target=$targets) {
      local (r=<=$target) {
         if {! result $r} {
            echo error occurred, uninstalling!
            rollback
            echo failed to install: $r
            exit $r
         }
      }
   }

   if {! result $#backup_dir} {
      let (backup_dir=$backup_dir)
         echo {rm -rf -- $backup_dir} >> $uninstaller
      # This isn't necessary or used by any script, but I don't like the idea
      # that I might have a backup directory but lose its restoring script
      ln $uninstaller $backup_dir/uninstall
      echo 'Existing files were moved to' $backup_dir
   }
}

echo Done.
