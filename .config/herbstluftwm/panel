#!/usr/bin/env es

# roughly ported from https://github.com/herbstluftwm/herbstluftwm/blob/v0.6.2/share/panel.sh

local (me=$0) where=`{dirname `{realpath $me}}

. $where/xcolors.es

. $where/ap.es
. $where/power.es

fn hc a { herbstclient $a }

monitor = 0
if {[ $#* -ge 1 ]}
   monitor = $1

geometry = `{herbstclient monitor_rect $monitor}

if {~ $geometry ()} {
    echo Invalid monitor $monitor
    exit 1
}
# geometry has the format W H X Y
(x y panel_width) = $geometry(1 ... 3)
panel_height = 16
pad=0
font='-*-fixed-medium-*-*-*-12-*-*-*-*-*-*-*'

bgcolor   =$XCOLORS_0
selbg     =$XCOLORS(4)
selfg     =$XCOLORS(15)
otherbg   =$XCOLORS_0
otherfg   =$XCOLORS(15)
urgentbg  =$XCOLORS(1)
urgentfg  =$XCOLORS(15)
defaultbg =$XCOLORS_0
defaultfg =$XCOLORS(7)

hilight   =$XCOLORS(15)
text      =$XCOLORS(7)
urgent    =$XCOLORS(1)

####
# Try to find textwidth binary.
# In e.g. Ubuntu, this is named dzen2-textwidth.
catch @ {
   catch @ {
      echo 'Can''t find textwidth.'
   } {
      %pathsearch dzen2-textwidth
      fn textwidth a { dzen2-textwidth $a }
   }
} {
   %pathsearch textwidth
}

####
# true if we are using the svn version of dzen2
# depending on version/distribution, this seems to have version strings like
# "dzen-" or "dzen-x.x.x-svn"
# XXX why do we care?
dzen2_svn = <={dzen2 -v >[2=1] | head -n 1 | grep -q '^dzen-\([^,]*-svn\|\),'}

if {awk -Wv >[2] /dev/null | head -n 1 | grep -q '^mawk'} {
   fn uniq_linebuffered a {
      # mawk needs "-W interactive" to line-buffer stdout correctly
      # http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=593504
      awk -W interactive '$0 != l { print ; l=$0; fflush(); }' $a
   }
} {
   fn uniq_linebuffered a {
      # other awk versions (e.g. gawk) issue a warning with "-W interactive", so
      # we don't want to use it there.
      awk '$0 != l { print ; l=$0; fflush(); }' $a
   }
}

hc pad $monitor $panel_height

OUTPUT=/dev/stderr

{
    ### Event generator ###
    # based on different input data (mpc, date, hlwm hooks, ...) this generates events, formed like this:
    #   <eventname>\t<data> [...]
    # e.g.
    #   date    ^fg(#efefef)18:33^fg(#909090), 2013-10-^fg(#efefef)29

    #mpc idleloop player &
   while {true} {
      # "date" output is checked once a second, but an event is only
      # generated if the output changed compared to the previous run.
      date = `` \n {date '+^fg('$hilight')%H:%M^fg('$text'), %Y-%m-^fg('$hilight')%d'}
      printf 'date\t%s\n' $date || break
      sleep 5
   } &
   while {true} {
      printf 'power\t%s\n' `` \n power || break
      sleep 5
   } &
   while {true} {
      printf 'net\t%s\n' `` \n net_state || break
      sleep 5
   } &
   hc --idle
} | {
   tags = `` \n\t {hc tag_status $monitor}
   visible = 0
   date=''
   windowtitle=''
   while {true} {

      ### Output ###
      # This part prints dzen data based on the _previous_ data handling run,
      # and then waits for the next event to happen.

      separator='^bg()^fg('$defaultfg')|'
      # draw tags
      for (i = $tags) {
         local ((prefix tag) = <={~~ $i ?*}) {
            if {~ $prefix \#} {
               echo -n '^bg('$selbg')^fg('$selfg')'
            } {~ $prefix +} {
               echo -n '^bg('$otherbg')^fg('$otherfg')'
            } {~ $prefix :} {
               echo -n '^bg('$otherbg')^fg('$otherfg')'
            } {~ $prefix !} {
               echo -n '^bg('$urgentbg')^fg('$urgentfg')'
            } {
               echo -n '^bg('$defaultbg')^fg('$defaultfg')'
            }
            if {result $dzen2_svn} {
               # clickable tags if using SVN dzen
               echo -n '^ca(1,herbstclient '
               echo -n 'focus_monitor '$monitor' && '
               echo -n 'herbstclient use '$tag') '$tag' ^ca()'
            } {
               # non-clickable tags if using older dzen
               echo -n ' '$tag' '
            }
         }
      }
      echo -n $separator
      echo -n '^bg('$otherbg')^fg('$otherfg') '`` \n {echo $windowtitle|sed 's,\^,^^,g'}
      # small adjustments
      right=$separator'^bg() '$powstate' '$separator'^bg() '$netstate' '$separator'^bg() '$date' '$separator
      right_text_only=`{echo -n $right | sed 's.\^[^(]*([^)]*)..g'}
      # get width of right aligned text.. and add some space..
      width=`{textwidth $font $^right_text_only}
      echo -n '^pa('`{expr $panel_width - $width - $pad - 16}')'$right
      echo

      ### Data handling ###
      # This part handles the events generated in the event loop, and sets
      # internal variables based on them. The event and its arguments are
      # read into the array cmd, then action is taken depending on the event
      # name.
      # "Special" events (quit_panel/togglehidepanel/reload) are also handled
      # here.

      # wait for next event
      (cmd args) = <={%split \t <=%read}
      # find out event origin
      if {~ $cmd tag*} {
         tags = `` \n\t {hc tag_status $monitor}
      } {~ $cmd date} {
         date=$args
      } {~ $cmd power} {
         powstate=$args
      } {~ $cmd net} {
         netstate=$args
      } {~ $cmd panel_pad} {
         pad=$args
      } {~ $cmd quit_panel} {
         exit
      } {~ $cmd togglehidepanel} {
         currentmonidx=`{hc list_monitors | sed -n '/\[FOCUS\]$/s/:.*//p'}
         @ {
            # XXX this must be a bug
            if {[ $args -ne $monitor ]} {return}
            if {[ $args \= current ] && [ $currentmonidx -ne $monitor ]} {return}
            echo '^togglehide()'
            if {result $visible} {
               visible = 1
                  hc pad $monitor 0
            } {
               visible = 0
                  hc pad $monitor $panel_height
            }
         }
      } {~ $cmd reload} {
         exit
      } {~ $cmd focus_changed window_title_changed} {
         windowtitle=$args(2 ...)
      }
    }

    ### dzen2 ###
    # After the data is gathered and processed, the output of the previous block
    # gets piped to dzen2.
} | dzen2 -dock -w $panel_width -x $x -y $y -fn $font -h $panel_height \
    -e 'button3=;button4=exec:herbstclient use_index -1;button5=exec:herbstclient use_index +1' \
    -ta l -bg $bgcolor -fg '#ff00ff'
