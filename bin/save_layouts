#!/usr/bin/env python3

"""
A probably very silly thing: Generate a shell script which will recreate the
current herbstluft layout, The idea is that you get everything how you want it,
run save_layouts, and arrange to run `sh ~/.config/herbstluftwm/_layout.sh` at
some point in your autostart.

Features:
- Includes running programs
- Automatically ignores tags with windows in them

Limitations:
- Doesn't attempt to preserve window within a frame
- Assumes one program invocation per window
"""

import clize
from clize import converters
from os.path import expanduser
import shlex
import subprocess
from Xlib.display import Display


RULE_FLAGS = ['once', 'maxage=20']


disp = Display()
A = disp.intern_atom


def quote(l):
    return ' '.join(shlex.quote(s) for s in l)


def hc(*a):
    return subprocess.check_output(['herbstclient', *a]).rstrip(b'\n').decode()


def window(id_):
    if isinstance(id_, str):
        id_ = int(id_, base=0)
    win = disp.create_resource_object('window', id_)
    return win


def window_command(win):
    p = win.get_full_property(A('WM_COMMAND'), A('STRING'))
    if p is not None:
        return [x.decode() for x in p.value.split(b'\x00')][:-1]
    pid = win.get_full_property(A('_NET_WM_PID'), A('CARDINAL'))
    if pid is None:
        return None
    pid = pid.value[0]
    with open(f"/proc/{pid}/cmdline", 'rb') as f:
        return [x.decode() for x in f.read().split(b'\x00')][:-1]


def window_rules(win):
    class_ = win.get_wm_class()
    if class_ is None:
        return ()
    p = { 'instance': class_[0], 'class': class_[1] }
    return frozenset(f"{k}={v}" for k, v in p.items())


class WindowRequest:
    def __init__(self, tag, index, id_):
        self.tag = tag
        self.index = index
        self.win = window(id_)
        self.rules = window_rules(self.win)
        self.command = window_command(self.win)
        self.consequences = [f"tag={self.tag}", f"index={self.index}"]

    def create_cmd(self):
        return quote(['nohup', *self.command]) + ' >/dev/null 2>&1 &'

    def __repr__(self):
        return f"<WindowRequest({self.command[0]}) tag={self.tag!r} index={self.index!r}>"


def hook_for_request(r, *extra):
    return ['herbstclient', 'rule', *RULE_FLAGS, *sorted(r.rules), *r.consequences, *extra]


tag_map = {}


def create_windows(rs, unconditional=False):
    ol = []
    def emit(x, *, indent=0):
        ol.append('  ' * indent + x)
    def emit_conditionally(req, yes=[], no=[], *, indent=0):
        if unconditional:
            for l in yes:
                emit(l, indent=indent)
            return
        emit(f'if [ -z "$no_tag_{tag_map[req.tag]}" ]; then', indent=indent)
        for l in yes:
            emit(l, indent=indent+1)
        if no:
            emit('else', indent=indent)
            for n in no:
                emit(n, indent=indent+1)
        emit('fi', indent=indent)
    rulegroups = {}
    for req in rs:
        if req.rules not in rulegroups:
            rulegroups[req.rules] = []
        rulegroups[req.rules].append(req)
    if () in rulegroups:
        print(f"Warning: ignoring {len(rulegroups[()])} empty rules")
        del rulegroups[()]
    rk = list(rulegroups.keys())
    for k in rk:
        for j in rk:
            if j < k:
                x = rulegroups[j]
                del rulegroups[j]
                rulegroups[k] += x
    rl = sorted(rulegroups.items(), key=lambda x: len(x[1]))
    reactors = 0
    first = True
    for rule, req in rl:
        if not first:
            emit('')
        first = False
        emit(f"# {' '.join(sorted(rule))}")
        if len(req) == 1:
            req = req[0]
            emit_conditionally(req, [
                quote(hook_for_request(req)),
                req.create_cmd(),
            ])
            continue
        reactors += 1
        reactorname = f"_reactor{reactors}"
        head, *react = req
        emit('herbstclient --idle | while read hook name extra; do')
        emit('  if [ "$hook" != rule ]; then continue; fi')
        emit('  case "$name" in')
        for i, r in enumerate(react):
            ol.append(f"    {reactorname}_hook{i})")
            if i + 1 < len(react):
                emit_conditionally(r, [
                    quote(hook_for_request(r, f"hook={reactorname}_hook{i+1}")),
                    r.create_cmd(),
                ], [
                    quote(['herbstclient', 'emit_hook', 'rule', f"{reactorname}_hook{i+1}"])
                ], indent=3)
            else:
                emit_conditionally(r, [
                    quote(hook_for_request(r)),
                    r.create_cmd(),
                ], indent=3)
                emit('break', indent=3)
            emit(';;', indent=2)
        emit('  esac')
        emit('done &')
        emit_conditionally(head, [
            quote(hook_for_request(head, f"hook={reactorname}_hook0")),
            head.create_cmd(),
        ], [
            quote(['herbstclient', 'emit_hook', 'rule', f"{reactorname}_hook0"]),
        ])
    return '\n'.join(ol)


def tag_setup(tag, layout):
    ol = []
    ol.append(f"""if [ "$(herbstclient attr 'tags.by-name.{tag}.client_count')" -ge 1 ]; then""")
    ol.append(f'  no_tag_{tag_map[tag]}=1')
    ol.append('else')
    ol.append('  ' + quote(['herbstclient', 'load', tag, layout]))
    ol.append('fi')
    return '\n'.join(ol)


def tag_wipe(tag, layout):
    ol = []
    if tag is None:
        t = ''
    else:
        t = ' ' + shlex.quote(tag)
    _n = shlex.quote('\n')
    ol.append(f"herbstclient dump{t} | tr -sc xa-f0-9 {_n} | grep ^0x | xargs -L1 herbstclient close")
    ol.append(quote(['herbstclient', 'load', tag, layout]))
    return '\n'.join(ol)


def parse_hc_dump(tag, si, index=''):
    x = next(si)
    if x != '(':
        raise Exception
    t = ''
    # read the type thing
    x = next(si)
    while x != ' ':
        t += x
        x = next(si)
    # read an argument we can always ignore
    layout = ''
    x = next(si)
    while x not in ' )':
        layout += x
        x = next(si)
    if x == ')':
        return [], f"({t} {layout})"
    if t == 'clients':
        r = []
        while True:
            x = next(si)
            id_ = ''
            while x not in ' )':
                id_ += x
                x = next(si)
            r.append(WindowRequest(tag, index, id_))
            if x == ')':
                break
        return r, f"({t} {layout})"
    else:
        rl, left = parse_hc_dump(tag, si, index + '0')
        x = next(si)
        if x != ' ':
            raise Exception
        rr, right = parse_hc_dump(tag, si, index + '1')
        x = next(si)
        if x != ')':
            raise Exception
        return rl + rr, f"({t} {layout} {left} {right})"


def main(output: converters.file(mode='w') = expanduser('~/.config/herbstluftwm/_layout.sh')):
    with output as f:
        tags = hc('tag_status').split('\t')[1:-1]
        rs = []
        for i, t in enumerate(tags, start=1):
            name = t[1:]
            tag_map[name] = i
            dump = hc('dump', name)
            rl, layout = parse_hc_dump(name, iter(dump))
            rs += rl
            print(tag_setup(name, layout) + '\n', file=f)
        print(create_windows(rs), file=f)


def one(tag: str = None,
        output: converters.file(mode='w') = '-'):
    if tag is None:
        tag = hc('attr', 'tags.focus.name')
    dump = hc('dump', tag)
    rl, layout = parse_hc_dump(tag, iter(dump))
    for req in rl:
        del req.consequences[0]
    with output as f:
        print(tag_wipe(None, layout), file=f)
        print(create_windows(rl, unconditional=True), file=f)


if __name__ == '__main__':
    clize.run(main, alt=(one,))
