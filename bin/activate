#!/bin/sh

# activate          - deactivate any active venv. yes, i know.
# activate <env>    - if <env> is a virtualenv, start a shell in it
# activate -f <env> - as above, but if it's not a virtualenv, start a shell
#                     anyway.

force=

if [ "$1" = "-f" ]; then
    force=yes
    shift 1
fi

noact=

if [ -z "$1" ]; then
    noact=yes
else
    venv="$(readlink -f $1)"
    if [ ! -f "$venv/bin/python" ]; then
        if [ -n "$force" ]; then
            exec "$SHELL"
        else
            exit 1
        fi
    fi
fi

if [ -n "$VIRTUAL_ENV" ]; then
    PATH=${PATH#$VIRTUAL_ENV/bin:}
fi

unset path

if [ -z "$noact" ]; then
    export VIRTUAL_ENV="$venv" PATH="$venv/bin:$PATH"
    unset PYTHONHOME
else
    export PATH
    unset VIRTUAL_ENV PYTHONHOME
fi

if [ -z "$noact" ]; then shift 1; fi

if [ -n "$*" ]; then
    # XXX this stuff is to work around a limitation of shells (mostly es) that
    # have no way to accept a -c with arguments starting with -
    # i'm quoting things by replacing ' with '\'', which fails for rc, but is
    # reliable for sh, bash and es
    cmd=""
    while [ -n "$*" ]; do
        cmd="$cmd $(echo $1|sed "s/'/'\\\\''/g; s/^/'/; s/$/'/;")"
        shift 1
    done
    _COMMAND="$cmd" exec "$SHELL" -c 'eval $_COMMAND'
else
    exec "$SHELL"
fi
